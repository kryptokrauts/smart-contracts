contract BatchPayment =

    // STATEFUL FUNCTIONS

    payable stateful entrypoint proceedBatchPayment(recipients': map(address, int)) =
        require(sumValues(recipients') == Call.value, "funds insufficient")
        let recipientList: list((address * int)) = Map.to_list(recipients')
        proceedSinglePayments(recipientList)

    stateful function proceedSinglePayments(recipients': list((address * int))) =
        switch(recipients')
            [] => ()
            (recipient, value) :: l' =>
                Chain.spend(recipient, value)
                proceedSinglePayments(l')

    // PRIVATE FUNCTIONS

    function sumValues(recipients': map(address, int)) : int =
        let recipients: list((address * int)) = Map.to_list(recipients')
        let intList: list(int) = map(pair_second, recipients)
        sum(intList, (x) => x)

    // GENERIC HELPER FUNCTIONS

    function map(f : 'a => 'b, l : list('a)) : list('b) =
        switch(l)
            [] => []
            e :: l' => f(e) :: map(f, l')

    function foldr(f : (('a, 'b) => 'b), z: 'b, l : list('a)) : 'b =
        switch(l)
            [] => z
            e :: l' => f(e, foldr(f, z, l'))

    function sum(l : list('a), f : 'a => int) : int =
        foldr((x, y) => x + y, 0, map(f, l))

    function pair_second(tuple) =
        switch(tuple)
            (_, e) => e
